// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_EmailLogin_FullMethodName             = "/service.User/EmailLogin"
	User_PassLogin_FullMethodName              = "/service.User/PassLogin"
	User_UserQuery_FullMethodName              = "/service.User/UserQuery"
	User_UserHomeQuery_FullMethodName          = "/service.User/UserHomeQuery"
	User_UserInteractionQuery_FullMethodName   = "/service.User/UserInteractionQuery"
	User_MeInfoUpdate_FullMethodName           = "/service.User/MeInfoUpdate"
	User_PassChangeVerify_FullMethodName       = "/service.User/PassChangeVerify"
	User_PassChange_FullMethodName             = "/service.User/PassChange"
	User_EmailChangeVerify_FullMethodName      = "/service.User/EmailChangeVerify"
	User_EmailChange_FullMethodName            = "/service.User/EmailChange"
	User_UserSignatureUpdate_FullMethodName    = "/service.User/UserSignatureUpdate"
	User_UserHomeTopImgNoUpdate_FullMethodName = "/service.User/UserHomeTopImgNoUpdate"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	UserQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserQueryResp, error)
	UserHomeQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserHomeQueryResp, error)
	UserInteractionQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserInteractionQueryResp, error)
	MeInfoUpdate(ctx context.Context, in *MeInfoUpdateReq, opts ...grpc.CallOption) (*MeInfoUpdateResp, error)
	PassChangeVerify(ctx context.Context, in *PassChangeVerifyReq, opts ...grpc.CallOption) (*PassChangeVerifyResp, error)
	PassChange(ctx context.Context, in *PassChangeReq, opts ...grpc.CallOption) (*PassChangeResp, error)
	EmailChangeVerify(ctx context.Context, in *EmailChangeVerifyReq, opts ...grpc.CallOption) (*EmailChangeVerifyResp, error)
	EmailChange(ctx context.Context, in *EmailChangeReq, opts ...grpc.CallOption) (*EmailChangeResp, error)
	UserSignatureUpdate(ctx context.Context, in *UserSignatureUpdateReq, opts ...grpc.CallOption) (*UserSignatureUpdateResp, error)
	UserHomeTopImgNoUpdate(ctx context.Context, in *UserHomeTopImgNoUpdateReq, opts ...grpc.CallOption) (*UserHomeTopImgNoUpdateResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_EmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_PassLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserQueryResp, error) {
	out := new(UserQueryResp)
	err := c.cc.Invoke(ctx, User_UserQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserHomeQueryResp, error) {
	out := new(UserHomeQueryResp)
	err := c.cc.Invoke(ctx, User_UserHomeQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInteractionQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserInteractionQueryResp, error) {
	out := new(UserInteractionQueryResp)
	err := c.cc.Invoke(ctx, User_UserInteractionQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) MeInfoUpdate(ctx context.Context, in *MeInfoUpdateReq, opts ...grpc.CallOption) (*MeInfoUpdateResp, error) {
	out := new(MeInfoUpdateResp)
	err := c.cc.Invoke(ctx, User_MeInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PassChangeVerify(ctx context.Context, in *PassChangeVerifyReq, opts ...grpc.CallOption) (*PassChangeVerifyResp, error) {
	out := new(PassChangeVerifyResp)
	err := c.cc.Invoke(ctx, User_PassChangeVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PassChange(ctx context.Context, in *PassChangeReq, opts ...grpc.CallOption) (*PassChangeResp, error) {
	out := new(PassChangeResp)
	err := c.cc.Invoke(ctx, User_PassChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EmailChangeVerify(ctx context.Context, in *EmailChangeVerifyReq, opts ...grpc.CallOption) (*EmailChangeVerifyResp, error) {
	out := new(EmailChangeVerifyResp)
	err := c.cc.Invoke(ctx, User_EmailChangeVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EmailChange(ctx context.Context, in *EmailChangeReq, opts ...grpc.CallOption) (*EmailChangeResp, error) {
	out := new(EmailChangeResp)
	err := c.cc.Invoke(ctx, User_EmailChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserSignatureUpdate(ctx context.Context, in *UserSignatureUpdateReq, opts ...grpc.CallOption) (*UserSignatureUpdateResp, error) {
	out := new(UserSignatureUpdateResp)
	err := c.cc.Invoke(ctx, User_UserSignatureUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeTopImgNoUpdate(ctx context.Context, in *UserHomeTopImgNoUpdateReq, opts ...grpc.CallOption) (*UserHomeTopImgNoUpdateResp, error) {
	out := new(UserHomeTopImgNoUpdateResp)
	err := c.cc.Invoke(ctx, User_UserHomeTopImgNoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	EmailLogin(context.Context, *EmailLoginReq) (*LoginResp, error)
	PassLogin(context.Context, *PassLoginReq) (*LoginResp, error)
	UserQuery(context.Context, *QueryReq) (*UserQueryResp, error)
	UserHomeQuery(context.Context, *QueryReq) (*UserHomeQueryResp, error)
	UserInteractionQuery(context.Context, *QueryReq) (*UserInteractionQueryResp, error)
	MeInfoUpdate(context.Context, *MeInfoUpdateReq) (*MeInfoUpdateResp, error)
	PassChangeVerify(context.Context, *PassChangeVerifyReq) (*PassChangeVerifyResp, error)
	PassChange(context.Context, *PassChangeReq) (*PassChangeResp, error)
	EmailChangeVerify(context.Context, *EmailChangeVerifyReq) (*EmailChangeVerifyResp, error)
	EmailChange(context.Context, *EmailChangeReq) (*EmailChangeResp, error)
	UserSignatureUpdate(context.Context, *UserSignatureUpdateReq) (*UserSignatureUpdateResp, error)
	UserHomeTopImgNoUpdate(context.Context, *UserHomeTopImgNoUpdateReq) (*UserHomeTopImgNoUpdateResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) EmailLogin(context.Context, *EmailLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedUserServer) PassLogin(context.Context, *PassLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassLogin not implemented")
}
func (UnimplementedUserServer) UserQuery(context.Context, *QueryReq) (*UserQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQuery not implemented")
}
func (UnimplementedUserServer) UserHomeQuery(context.Context, *QueryReq) (*UserHomeQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeQuery not implemented")
}
func (UnimplementedUserServer) UserInteractionQuery(context.Context, *QueryReq) (*UserInteractionQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInteractionQuery not implemented")
}
func (UnimplementedUserServer) MeInfoUpdate(context.Context, *MeInfoUpdateReq) (*MeInfoUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeInfoUpdate not implemented")
}
func (UnimplementedUserServer) PassChangeVerify(context.Context, *PassChangeVerifyReq) (*PassChangeVerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassChangeVerify not implemented")
}
func (UnimplementedUserServer) PassChange(context.Context, *PassChangeReq) (*PassChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassChange not implemented")
}
func (UnimplementedUserServer) EmailChangeVerify(context.Context, *EmailChangeVerifyReq) (*EmailChangeVerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailChangeVerify not implemented")
}
func (UnimplementedUserServer) EmailChange(context.Context, *EmailChangeReq) (*EmailChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailChange not implemented")
}
func (UnimplementedUserServer) UserSignatureUpdate(context.Context, *UserSignatureUpdateReq) (*UserSignatureUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignatureUpdate not implemented")
}
func (UnimplementedUserServer) UserHomeTopImgNoUpdate(context.Context, *UserHomeTopImgNoUpdateReq) (*UserHomeTopImgNoUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeTopImgNoUpdate not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EmailLogin(ctx, req.(*EmailLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PassLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PassLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_PassLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PassLogin(ctx, req.(*PassLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserHomeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInteractionQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInteractionQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserInteractionQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInteractionQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_MeInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MeInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MeInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MeInfoUpdate(ctx, req.(*MeInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PassChangeVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassChangeVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PassChangeVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_PassChangeVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PassChangeVerify(ctx, req.(*PassChangeVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PassChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PassChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_PassChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PassChange(ctx, req.(*PassChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EmailChangeVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailChangeVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EmailChangeVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EmailChangeVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EmailChangeVerify(ctx, req.(*EmailChangeVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EmailChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EmailChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EmailChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EmailChange(ctx, req.(*EmailChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserSignatureUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignatureUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserSignatureUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserSignatureUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserSignatureUpdate(ctx, req.(*UserSignatureUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeTopImgNoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserHomeTopImgNoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeTopImgNoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserHomeTopImgNoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeTopImgNoUpdate(ctx, req.(*UserHomeTopImgNoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmailLogin",
			Handler:    _User_EmailLogin_Handler,
		},
		{
			MethodName: "PassLogin",
			Handler:    _User_PassLogin_Handler,
		},
		{
			MethodName: "UserQuery",
			Handler:    _User_UserQuery_Handler,
		},
		{
			MethodName: "UserHomeQuery",
			Handler:    _User_UserHomeQuery_Handler,
		},
		{
			MethodName: "UserInteractionQuery",
			Handler:    _User_UserInteractionQuery_Handler,
		},
		{
			MethodName: "MeInfoUpdate",
			Handler:    _User_MeInfoUpdate_Handler,
		},
		{
			MethodName: "PassChangeVerify",
			Handler:    _User_PassChangeVerify_Handler,
		},
		{
			MethodName: "PassChange",
			Handler:    _User_PassChange_Handler,
		},
		{
			MethodName: "EmailChangeVerify",
			Handler:    _User_EmailChangeVerify_Handler,
		},
		{
			MethodName: "EmailChange",
			Handler:    _User_EmailChange_Handler,
		},
		{
			MethodName: "UserSignatureUpdate",
			Handler:    _User_UserSignatureUpdate_Handler,
		},
		{
			MethodName: "UserHomeTopImgNoUpdate",
			Handler:    _User_UserHomeTopImgNoUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"qianshi/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EmailLoginReq            = __.EmailLoginReq
	LoginResp                = __.LoginResp
	PassChangeReq            = __.PassChangeReq
	PassChangeResp           = __.PassChangeResp
	PassChangeVerifyReq      = __.PassChangeVerifyReq
	PassChangeVerifyResp     = __.PassChangeVerifyResp
	PassLoginReq             = __.PassLoginReq
	QueryReq                 = __.QueryReq
	UserHomeQueryResp        = __.UserHomeQueryResp
	UserInteractionQueryResp = __.UserInteractionQueryResp
	UserQueryResp            = __.UserQueryResp

	User interface {
		EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserQueryResp, error)
		UserHomeQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserHomeQueryResp, error)
		UserInteractionQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserInteractionQueryResp, error)
		PassChangeVerify(ctx context.Context, in *PassChangeVerifyReq, opts ...grpc.CallOption) (*PassChangeVerifyResp, error)
		PassChange(ctx context.Context, in *PassChangeReq, opts ...grpc.CallOption) (*PassChangeResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.EmailLogin(ctx, in, opts...)
}

func (m *defaultUser) PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.PassLogin(ctx, in, opts...)
}

func (m *defaultUser) UserQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserQueryResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.UserQuery(ctx, in, opts...)
}

func (m *defaultUser) UserHomeQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserHomeQueryResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.UserHomeQuery(ctx, in, opts...)
}

func (m *defaultUser) UserInteractionQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*UserInteractionQueryResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.UserInteractionQuery(ctx, in, opts...)
}

func (m *defaultUser) PassChangeVerify(ctx context.Context, in *PassChangeVerifyReq, opts ...grpc.CallOption) (*PassChangeVerifyResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.PassChangeVerify(ctx, in, opts...)
}

func (m *defaultUser) PassChange(ctx context.Context, in *PassChangeReq, opts ...grpc.CallOption) (*PassChangeResp, error) {
	client := __.NewUserClient(m.cli.Conn())
	return client.PassChange(ctx, in, opts...)
}
